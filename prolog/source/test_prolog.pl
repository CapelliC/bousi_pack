%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Test module for Prolog predicates

:- module(test_prolog, [
		run_all_prolog_tests/3  % +BasePath, -Passed, -Failed
	]).

:- use_module(library(lists)).
:- use_module(library(statistics)).
:- use_module(library(apply)).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Main predicates for testing Prolog predicates
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%% run_all_prolog_tests(+BasePath, -Passed, -Failed)
%
%     Loads all the files for testing Prolog predicates (which must
%     be under the BasePath directory) and runs all their tests using
%     run_prolog_test_files/5.
%
%     The total number of tests passed and failed will be returned in
%     Passed and Failed, respectively.
%
%     @see run_prolog_test_files/5
%

run_all_prolog_tests(BasePath, Passed, Failed) :-
	prolog_test_files(Files),
	add_path_to_files(Files, FullFiles, BasePath),
	run_prolog_test_files(FullFiles, 0, Passed, 0, Failed).


%% run_prolog_test_files(+Files, +Passed, -FinalPassed, +Failed, -FinalFailed)
%
%     Loads each of the Prolog source code files of the Files list in
%     Prolog and Bousi-Prolog, and runs all the test predicates of
%     their test suites under both systems using run_prolog_test_suites/5.
%
%     Passed/FinalPassed and Failed/FinalFailed are two accumulator
%     pairs: FinalPassed will be unified with Passed plus the number of
%     tests passed, whereas FinalFailed will be unified with Failed plus
%     the number of tests failed.
%
%     @see run_prolog_test_suites/5
%

run_prolog_test_files([], Passed, Passed, Failed, Failed).

run_prolog_test_files([File|MoreFiles], Passed, FinalPassed, Failed, FinalFailed) :-
	file_base_name(File, BaseFile),
	write('------------------------------------------------------------------------------'), nl,
	writef('Running Prolog test file %w', [BaseFile]), nl,
	write('------------------------------------------------------------------------------'), nl,
	(
		% Loads the Prolog file both in Prolog and Bousi-Prolog
		% (each Prolog file contains several test suites)
		catch((
			bplShell:ld(File, [f]),
			bplShell:last_program_loaded(LoadedFile, ''),
			file_base_name(LoadedFile, BaseFile),
			[File],
			!
		% (catcher)
		), _Error, (
			fail
		)),
		% Gets the test suites contained in the loaded file and runs them
		test_suites(TestSuites),
		run_prolog_test_suites(TestSuites, Passed, NewPassed, Failed, NewFailed)
	;
		% Prolog file couldn't be loaded
		writef('Test file %w couldn\'t be loaded.', [BaseFile]), nl,
		write('Press any key to continue '),
		get_single_char(_),
		nl,
		NewPassed is Passed,
		NewFailed is Failed + 1
	),
	!,
	% Proceeds to the next file
	run_prolog_test_files(MoreFiles, NewPassed, FinalPassed, NewFailed, FinalFailed).


%% run_prolog_test_suites(+Suites, +Passed, -FinalPassed, +Failed, -FinalFailed)
%
%     For each atom in the Suites list, retrieves the test predicates
%     which have a name starting with that atom, and runs them all using
%     run_prolog_tests/5.
%
%     Passed/FinalPassed and Failed/FinalFailed are two accumulator
%     pairs: FinalPassed will be unified with Passed plus the number of
%     tests passed, whereas FinalFailed will be unified with Failed plus
%     the number of tests failed.
%
%     @see run_prolog_tests/5
%

run_prolog_test_suites([], Passed, Passed, Failed, Failed).

run_prolog_test_suites([Suite|MoreSuites], Passed, FinalPassed, Failed, FinalFailed) :-
	% Looks for the predicates that belong to this test suite
	atom_chars(Suite, SuiteChars),
	findall(Functor/Arity, (
		current_predicate(Functor/Arity),
		atom_chars(Functor, FunctorChars),
		append(SuiteChars, _, FunctorChars)
	), Tests),
	% Runs the tests of this test suite
	sort(Tests, SortedTests),
	run_prolog_tests(SortedTests, Passed, NewPassed, Failed, NewFailed),
	% Proceeds to the next test suite
	run_prolog_test_suites(MoreSuites, NewPassed, FinalPassed, NewFailed, FinalFailed).


%% run_prolog_tests(+Tests, +Passed, -FinalPassed, +Failed, -FinalFailed)
%
%     Runs each of the predicates of the Tests list under Prolog and
%     Bousi-Prolog, and compares both the output and the solutions
%     generated by each pair of executions. A test will pass only if the
%     output and the solutions returned by Prolog and Bousi-Prolog are
%     exactly the same.
%
%     Passed/FinalPassed and Failed/FinalFailed are two accumulator
%     pairs: FinalPassed will be unified with Passed plus the number of
%     tests passed, whereas FinalFailed will be unified with Failed plus
%     the number of tests failed.
%
%     @see execute_test/3
%

run_prolog_tests([], Passed, Passed, Failed, Failed).

run_prolog_tests([Test|MoreTests], Passed, FinalPassed, Failed, FinalFailed) :-
	Test = Functor/Arity,
	writef('Testing %w/%w... ', [Functor, Arity]),
	% Builds the goal that will be used to launch the test
	length(Args, Arity),
	Goal =.. [Functor|Args],
	% Executes the test under Prolog
	tmp_file('test', PrologOutputFile),
	tell(PrologOutputFile),
	execute_test(Goal, Args, PrologSolutions),
	told,
	!,
	% Executes the test under Bousi-Prolog
	tmp_file('test', BousiPrologOutputFile),
	tell(BousiPrologOutputFile),
	execute_test(evaluator:solve_goal(bpl_call(Goal)), Args, BousiPrologSolutions),
	told,
	!,
	% Reads the output of both executions
	read_file_to_codes(PrologOutputFile, PrologOutput, []),
	read_file_to_codes(BousiPrologOutputFile, BousiPrologOutput, []),
	(
		% Compares the output and the solutions of both executions
		PrologOutput =@= BousiPrologOutput,
		PrologSolutions =@= BousiPrologSolutions,
		(throws_exception(Functor) ->
			PrologSolutions == [exception_thrown]
		;
			PrologSolutions \== [exception_thrown]
		),
		% Test passed
		write('OK'), nl,
		NewPassed is Passed + 1,
		NewFailed is Failed
	;
		% Test failed
		write('failed'), nl,
		NewPassed is Passed,
		NewFailed is Failed + 1,
		% Shows the results of the test
		atom_codes(PrologOutputAtom, PrologOutput),
		atom_codes(BousiPrologOutputAtom, BousiPrologOutput),
		writef('> Prolog solutions ....... %w', [PrologSolutions]), nl,
		writef('> Bousi-Prolog solutions . %w', [BousiPrologSolutions]), nl,
		writef('> Prolog output .......... \'%w\'', [PrologOutputAtom]), nl,
		writef('> Bousi-Prolog output .... \'%w\'', [BousiPrologOutputAtom]), nl,
		(throws_exception(Functor) ->
			write('> Exception expected ..... Yes'), nl
		;
			write('> Exception expected ..... No'), nl
		),
		write('Press any key to continue '),
		get_single_char(_),
		nl
	),
	delete_file(PrologOutputFile),
	delete_file(BousiPrologOutputFile),
	!,
	% Proceeds to the next test
	run_prolog_tests(MoreTests, NewPassed, FinalPassed, NewFailed, FinalFailed).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Helper predicates
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%% execute_test(+Goal, +Args, -Solutions)
%
%     Invokes Goal as a goal and unifies Solutions with a list of the
%     instantiations that Args gets successively on backtracking over
%     Goal. If Goal throws an unhandled exception, this predicate will
%     catch it and a list with the single atom 'exception_thrown' will
%     be returned in Solutions.
%

execute_test(Goal, Args, Solutions) :-
	catch((
		findall(Args, Goal, Solutions)
	% (catcher)
	), _Error, (
		Solutions = [exception_thrown]
	)).


%% add_path_to_files(+Files, -FullPaths, +BasePath)
%
%     Concatenates BasePath with each of the filenames in Files and
%     returns the resulting paths in FullPaths.
%

add_path_to_files([], [], _BasePath).

add_path_to_files([File|MoreFiles], [FullPath|MoreFullPaths], BasePath) :-
	(concat_atom([_, '/'], BasePath) ->
		concat_atom([BasePath, File], FullPath)
	;
		concat_atom([BasePath, '/', File], FullPath)
	),
	add_path_to_files(MoreFiles, MoreFullPaths, BasePath).



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Constant predicates
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%% prolog_test_files(?Files)
%
%     Returns the list of Prolog source code files that contain the
%     test suites used by this module.
%

prolog_test_files(['pl_arithmetic.pl', 'pl_control.pl', 'pl_dynamic.pl',
                   'pl_findall.pl', 'pl_higherorder.pl', 'pl_io.pl',
                   'pl_lists.pl', 'pl_terms.pl', 'pl_typetest.pl',
                   'pl_unification.pl', 'pl_other.pl']).

